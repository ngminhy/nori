@model Biz4CMS.Models.ShippingLocation
@{
    ViewBag.Title = "Create";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}
<div class="col-sm-12">
    @using (Html.BeginForm(ViewContext.RouteData.Values["Action"].ToString(), ViewContext.RouteData.Values["Controller"].ToString(),
    new { ReturnUrl = ViewBag.ReturnUrl },
    FormMethod.Post))
    {
        @Html.ValidationSummary(true)
        <div class="form-group">
            @Html.LabelFor(model => model.Title)
            @Html.EditorFor(model => model.Title, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Title)

        </div>



    <!-- 
        <fieldset>

            <legend>ShippingLocation</legend>
            <div class="form-group">
                @Html.LabelFor(model => model.Title , new { @class = "col-sm-3 control-label no-padding-right" })
                <div class="col-sm-9">
                    @Html.EditorFor(model => model.Title, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Title)
                </div>

            </div>
       
         
            <div class="form-group">
                @Html.LabelFor(model => model.Polyobj, new { @class = "col-sm-3 control-label no-padding-right" })
                <div class="col-sm-9">
                    @Html.EditorFor(model => model.Polyobj, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Polyobj)
                </div>

            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Polyobj, new { @class = "col-sm-3 control-label no-padding-right" })
                <div class="col-sm-9">
                    <div id="map_canvas" style="width:500px; height:450px;"></div>
                    
                </div>

            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Active, new { @class = "col-sm-3 control-label no-padding-right" })
                <div class="col-sm-9">
                    @Html.EditorFor(model => model.Active, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Active)
                </div>

            </div>

            <div class="editor-label">
                &nbsp;
                @Html.HiddenFor(model => model.ShippingLocationId)
            </div>

            <div class="form-group">
                <label class="col-sm-3 control-label no-padding-right"></label>
                <div class="col-sm-9">
                    <input type="submit" value="Create or Update" class="btn btn-info" />
                </div>

            </div>

        </fieldset> -->




    }
    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
</div>
<script>
    var map;
    function initMap() {
        var myLatlng = new google.maps.LatLng(10.817605, 106.6345552);
      
        map = new google.maps.Map(document.getElementById('map_canvas'), {
            zoom: 13,
            center: myLatlng,
            fullscreenControl: true,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            // only show roadmap type of map, and disable ability to switch to other type
            mapTypeControl: false
        });

        map.data.setControls(['Polygon']);
        map.data.setStyle({
            editable: true,
            draggable: true
        });
        bindDataLayerListeners(map.data);

        //load saved data
        loadPolygons(map);
    }


    // Apply listeners to refresh the GeoJson display on a given data layer.
    function bindDataLayerListeners(dataLayer) {
        dataLayer.addListener('addfeature', savePolygon);
        dataLayer.addListener('removefeature', savePolygon);
        dataLayer.addListener('setgeometry', savePolygon);
    }
 

    function loadPolygons(map) {
        //var data = JSON.parse(localStorage.getItem('geoData'));
        var data = JSON.parse($("#Polyobj").val());
        console.log(data)
        map.data.forEach(function (f) {
            map.data.remove(f);
        });
        map.data.addGeoJson(data)
    }



    function savePolygon() {
        map.data.toGeoJson(function (json) {
            console.log(JSON.stringify(json))
            //localStorage.setItem('geoData', JSON.stringify(json));
            $("#Polyobj").val(JSON.stringify(json));
        });
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDQ0pDRDKSyAO4lm10ttEXa2_uoZmWQzHc&signed_in=false&libraries=drawing,geometry&callback=initMap"></script>